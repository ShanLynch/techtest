{
	"info": {
		"_postman_id": "40312dc1-55ab-4a00-a8fb-7ef00411a351",
		"name": "RESTful API basics: CRUD, test & variable",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.pstmn.io/API-testing-basics)  \n[API documentation](https://go.pstmn.io/API-documentation)  \n[Authorization methods](https://go.pstmn.io/Authorization-methods)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28364082"
	},
	"item": [
		{
			"name": "CRUD Test",
			"item": [
				{
					"name": "Get all entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/employees/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees",
								""
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post Create User to delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"//Define the JSON schema that you want to validate",
									"const jsonData = pm.response.json();",
									"var schema = {",
									"    type: \"object\",",
									"    required: [\"FirstName\", \"LastName\", \"DateOfBirth\", \"StartDate\", \"Department\", \"JobTitle\", \"Email\", \"Mobile\", \"Address\",  \"BaseSalary\"],",
									"    properties: {",
									"        FirstName: {",
									"            type: \"string\",",
									"            minLength: 1,",
									"        },",
									"        LastName: {",
									"            type: \"string\",",
									"            minLength: 1,",
									"        },",
									"        DateOfBirth: {type: \"string\",",
									"            minLength: 8,",
									"            },",
									"        Department: {type: \"string\",",
									"            minLength: 1,",
									"            },",
									"        JobTitle: {type: \"string\",",
									"            minLength: 1,",
									"            },",
									"        StartDate: {type: \"string\",",
									"        minLength: 8,},",
									"        Mobile: {",
									"            type: \"string\",",
									"            minLength: 10,",
									"            maxLength: 10,",
									"        },",
									"        Email: {",
									"            type: \"string\",",
									"            ",
									"        },",
									"        Address: {",
									"            type: \"string\",",
									"",
									"        },",
									"        BaseSalary: {",
									"            type: \"string\",",
									"        }",
									"        ",
									"    },",
									"};",
									"",
									"//Validate the response body",
									"pm.test('Schema validation', () => {",
									"  pm.response.to.have.jsonSchema (schema);",
									"});",
									"",
									"pm.test(\"Verify First and Last names only contain letters\", function(){",
									"    let validRegex = /^[a-zA-Z]+$/",
									"    pm.expect(pm.response.json().FirstName).match(validRegex) ",
									"    pm.expect(pm.response.json().LastName).match(validRegex) ",
									"});",
									"",
									"pm.test(\"BaseSalary is a number\", function (){",
									"    pm.expect(pm.response.json().BaseSalary).to.be.a('string');",
									"    var validRegex = /^[0-9]/;",
									"    pm.expect(pm.response.json().BaseSalary).match(validRegex)",
									"});",
									"pm.test(\"Email is valid\", function (){",
									" ",
									"    pm.expect(pm.response.json().Email).to.be.a('string');",
									"    var validRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;",
									"    pm.expect(pm.response.json().Email).match(validRegex)",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"FirstName\": \"Deleteie\", \n    \"LastName\": \"DeleteFace\",\n    \"DateOfBirth\": \"04/10/2015\",\n    \"StartDate\": \"23/08/2001\",\n    \"Department\": \"QA\",\n    \"JobTitle\": \"QA analyst\",\n    \"Email\": \"DeletieDeleteFace@outlook.com.au\",\n    \"Mobile\": \"04088015442\", \n    \"Address\": \"29 Invalid Null street Hogan Springs 2127 NSW\",\n    \"BaseSalary\": \"120000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/employees/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees",
								""
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Define the JSON schema that you want to validate",
									"const jsonData = pm.response.json();",
									"var schema = {",
									"    type: \"object\",",
									"    required: [\"FirstName\", \"LastName\", \"DateOfBirth\", \"StartDate\", \"Department\", \"JobTitle\", \"Email\", \"Mobile\", \"Address\",  \"BaseSalary\"],",
									"    properties: {",
									"        FirstName: {",
									"            type: \"string\",",
									"            minLength: 1,",
									"        },",
									"        LastName: {",
									"            type: \"string\",",
									"            minLength: 1,",
									"        },",
									"        DateOfBirth: {type: \"string\",",
									"            minLength: 8,",
									"            },",
									"        Department: {type: \"string\",",
									"            minLength: 1,",
									"            },",
									"        JobTitle: {type: \"string\",",
									"            minLength: 1,",
									"            },",
									"        StartDate: {type: \"string\",",
									"        minLength: 8,},",
									"        Mobile: {",
									"            type: \"string\",",
									"            minLength: 10,",
									"            maxLength: 10,",
									"        },",
									"        Email: {",
									"            type: \"string\",",
									"            ",
									"        },",
									"        Address: {",
									"            type: \"string\",",
									"",
									"        },",
									"        BaseSalary: {",
									"            type: \"string\",",
									"        }",
									"        ",
									"    },",
									"};",
									"",
									"//Validate the response body",
									"pm.test('Schema validation', () => {",
									"  pm.response.to.have.jsonSchema (schema);",
									"});",
									"",
									"pm.test(\"Verify First and Last names only contain letters\", function(){",
									"    let validRegex = /^[a-zA-Z]+$/",
									"    pm.expect(pm.response.json().FirstName).match(validRegex) ",
									"    pm.expect(pm.response.json().LastName).match(validRegex) ",
									"});",
									"",
									"pm.test(\"BaseSalary is a number\", function (){",
									"    pm.expect(pm.response.json().BaseSalary).to.be.a('string');",
									"    var validRegex = /^[0-9]/;",
									"    pm.expect(pm.response.json().BaseSalary).match(validRegex)",
									"});",
									"pm.test(\"Email is valid\", function (){",
									" ",
									"    pm.expect(pm.response.json().Email).to.be.a('string');",
									"    var validRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;",
									"    pm.expect(pm.response.json().Email).match(validRegex)",
									"",
									"});",
									"",
									"",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"FirstName\": \"Shannon\", \n    \"LastName\": \"Lynch\",\n    \"DateOfBirth\": \"04/10/1995\",\n    \"StartDate\": \"1/04/2023\",\n    \"Department\": \"QA\",\n    \"JobTitle\": \"QA analyst\",\n    \"Email\": \"shannonlynch@outlook.com.au\",\n    \"Mobile\": \"0408826332\", \n    \"Address\": \"29 Baronga Street Jordan Springs 2747 NSW\",\n    \"BaseSalary\": \"120000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/employees/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user 1's Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Define the JSON schema that you want to validate",
									"const jsonData = pm.response.json();",
									"var schema = {",
									"    type: \"object\",",
									"    required: [\"FirstName\", \"LastName\", \"DateOfBirth\", \"StartDate\", \"Department\", \"JobTitle\", \"Email\", \"Mobile\", \"Address\",  \"BaseSalary\"],",
									"    properties: {",
									"        FirstName: {",
									"            type: \"string\",",
									"            minLength: 1,",
									"        },",
									"        LastName: {",
									"            type: \"string\",",
									"            minLength: 1,",
									"        },",
									"        DateOfBirth: {type: \"string\",",
									"            minLength: 8,",
									"            },",
									"        Department: {type: \"string\",",
									"            minLength: 1,",
									"            },",
									"        JobTitle: {type: \"string\",",
									"            minLength: 1,",
									"            },",
									"        StartDate: {type: \"string\",",
									"        minLength: 8,},",
									"        Mobile: {",
									"            type: \"string\",",
									"            minLength: 10,",
									"            maxLength: 10,",
									"        },",
									"        Email: {",
									"            type: \"string\",",
									"            ",
									"        },",
									"        Address: {",
									"            type: \"string\",",
									"",
									"        },",
									"        BaseSalary: {",
									"            type: \"string\",",
									"        }",
									"        ",
									"    },",
									"};",
									"",
									"//Validate the response body",
									"pm.test('Schema validation', () => {",
									"  pm.response.to.have.jsonSchema (schema);",
									"});",
									"",
									"pm.test(\"Verify First and Last names only contain letters\", function(){",
									"    let validRegex = /^[a-zA-Z]+$/",
									"    pm.expect(pm.response.json().FirstName).match(validRegex) ",
									"    pm.expect(pm.response.json().LastName).match(validRegex) ",
									"});",
									"",
									"pm.test(\"BaseSalary is a number\", function (){",
									"    pm.expect(pm.response.json().BaseSalary).to.be.a('string');",
									"    var validRegex = /^[0-9]/;",
									"    pm.expect(pm.response.json().BaseSalary).match(validRegex)",
									"});",
									"pm.test(\"Email is valid\", function (){",
									" ",
									"    pm.expect(pm.response.json().Email).to.be.a('string');",
									"    var validRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;",
									"    pm.expect(pm.response.json().Email).match(validRegex)",
									"",
									"});",
									"",
									"",
									"",
									"pm.test(\"Successful Patch request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\t\"FirstName\": \"Bob\",\n    \"LastName\": \"Harvey\",\n    \"Mobile\": \"0408801544\" \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/employees/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Update data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Define the JSON schema that you want to validate",
									"const jsonData = pm.response.json();",
									"var schema = {",
									"    type: \"object\",",
									"    required: [\"FirstName\", \"LastName\", \"DateOfBirth\", \"StartDate\", \"Department\", \"JobTitle\", \"Email\", \"Mobile\", \"Address\",  \"BaseSalary\"],",
									"    properties: {",
									"        FirstName: {",
									"            type: \"string\",",
									"            minLength: 1,",
									"        },",
									"        LastName: {",
									"            type: \"string\",",
									"            minLength: 1,",
									"        },",
									"        DateOfBirth: {type: \"string\",",
									"            minLength: 8,",
									"            },",
									"        Department: {type: \"string\",",
									"            minLength: 1,",
									"            },",
									"        JobTitle: {type: \"string\",",
									"            minLength: 1,",
									"            },",
									"        StartDate: {type: \"string\",",
									"        minLength: 8,},",
									"        Mobile: {",
									"            type: \"string\",",
									"            minLength: 10,",
									"            maxLength: 10,",
									"        },",
									"        Email: {",
									"            type: \"string\",",
									"            ",
									"        },",
									"        Address: {",
									"            type: \"string\",",
									"",
									"        },",
									"        BaseSalary: {",
									"            type: \"string\",",
									"        }",
									"        ",
									"    },",
									"};",
									"",
									"//Validate the response body",
									"pm.test('Schema validation', () => {",
									"  pm.response.to.have.jsonSchema (schema);",
									"});",
									"",
									"pm.test(\"Verify First and Last names only contain letters\", function(){",
									"    let validRegex = /^[a-zA-Z]+$/",
									"    pm.expect(pm.response.json().FirstName).match(validRegex) ",
									"    pm.expect(pm.response.json().LastName).match(validRegex) ",
									"});",
									"",
									"pm.test(\"BaseSalary is a number\", function (){",
									"    pm.expect(pm.response.json().BaseSalary).to.be.a('string');",
									"    var validRegex = /^[0-9]/;",
									"    pm.expect(pm.response.json().BaseSalary).match(validRegex)",
									"});",
									"pm.test(\"Email is valid\", function (){",
									" ",
									"    pm.expect(pm.response.json().Email).to.be.a('string');",
									"    var validRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;",
									"    pm.expect(pm.response.json().Email).match(validRegex)",
									"",
									"});",
									"",
									"",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"FirstName\": \"Shannon2\", \n    \"LastName\": \"Lynch\",\n    \"DateOfBirth\": \"04/10/1995\",\n    \"StartDate\": \"1/04/2023\",\n    \"Department\": \"QA\",\n    \"JobTitle\": \"QA analyst\",\n    \"Email\": \"shannonlynch@outlook.com.au\",\n    \"Mobile\": \"0408826332\", \n    \"Address\": \"29 Baronga Street Jordan Springs 2747 NSW\",\n    \"BaseSalary\": \"120000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/employees/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees",
								"2"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "get user id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/employees/?id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Delete entry 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/employees/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "get user id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const jsonData = pm.response.json();",
									"var schema = {",
									"    type: \"object\",",
									"    required: [\"FirstName\", \"LastName\", \"DateOfBirth\", \"StartDate\", \"Department\", \"JobTitle\", \"Email\", \"Mobile\", \"Address\",  \"BaseSalary\"],",
									"    properties: {",
									"        FirstName: {",
									"            type: \"string\",",
									"            minLength: 1,",
									"        },",
									"        LastName: {",
									"            type: \"string\",",
									"            minLength: 1,",
									"        },",
									"        DateOfBirth: {type: \"string\",",
									"            minLength: 8,",
									"            },",
									"        Department: {type: \"string\",",
									"            minLength: 1,",
									"            },",
									"        JobTitle: {type: \"string\",",
									"            minLength: 1,",
									"            },",
									"        StartDate: {type: \"string\",",
									"        minLength: 8,},",
									"        Mobile: {",
									"            type: \"string\",",
									"            minLength: 10,",
									"            maxLength: 10,",
									"        },",
									"        Email: {",
									"            type: \"string\",",
									"            ",
									"        },",
									"        Address: {",
									"            type: \"string\",",
									"",
									"        },",
									"        BaseSalary: {",
									"            type: \"string\",",
									"        }",
									"        ",
									"    },",
									"};",
									"",
									"//Validate the response body",
									"pm.test('Schema validation', () => {",
									"  pm.response.to.have.jsonSchema (schema);",
									"});",
									"",
									"pm.test(\"Verify First and Last names only contain letters\", function(){",
									"    let validRegex = /^[a-zA-Z]+$/",
									"    pm.expect(pm.response.json().FirstName).match(validRegex) ",
									"    pm.expect(pm.response.json().LastName).match(validRegex) ",
									"});",
									"",
									"pm.test(\"BaseSalary is a number\", function (){",
									"    pm.expect(pm.response.json().BaseSalary).to.be.a('string');",
									"    var validRegex = /^[0-9]/;",
									"    pm.expect(pm.response.json().BaseSalary).match(validRegex)",
									"});",
									"pm.test(\"Email is valid\", function (){",
									" ",
									"    pm.expect(pm.response.json().Email).to.be.a('string');",
									"    var validRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;",
									"    pm.expect(pm.response.json().Email).match(validRegex)",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/employees/?id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employees",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}